name: Github Actions CI CD

on: [push, pull_request]

jobs:
  ci_cd:
    name: CI/CD

    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, windows-2019, macos-10.15]
        openssl: ["ON", "OFF"]
        pthreads: ["ON", "OFF"]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2.3.1

    - name: Windows - setup MSYS2/MinGW
      if: matrix.os == 'windows-2019'
      uses: msys2/setup-msys2@v2
      with:
        release: true
        msystem: MINGW64
        update: true
        install: >-
            git
            mingw64/mingw-w64-x86_64-ninja
            mingw64/mingw-w64-x86_64-cmake
            mingw64/mingw-w64-x86_64-headers-git
            mingw64/mingw-w64-x86_64-gcc
            mingw64/mingw-w64-x86_64-openssl

    # statically link OpenSSL on macOS CI/CD binaries
    - name: macOS - setup OpenSSL
      if: matrix.os == 'macos-10.15'
      run: |
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV
        echo "MACOS_STATIC_OPENSSL=-DOPENSSL_USE_STATIC_LIBS=ON" >> $GITHUB_ENV

    - name: Linux, macOS - build
      if: matrix.os != 'windows-2019'
      run: |
        cmake -S . -B build $MACOS_STATIC_OPENSSL -DMKTORRENT_LONG_OPTIONS=ON -DMKTORRENT_PTHREADS=${{ matrix.pthreads }} -DMKTORRENT_OPENSSL=${{ matrix.openssl }} -DMKTORRENT_USE_GITREV_VERSION=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_EXPORT_COMPILE_COMMANDS=ON --graphviz=build/target_graph.dot
        cmake --build build

    - name: Windows - build with MSYS2/MinGW64
      if: matrix.os == 'windows-2019'
      shell: msys2 {0}
      run: |
        cmake -S . -B build -G "Ninja" -DOPENSSL_USE_STATIC_LIBS=ON -DMKTORRENT_LONG_OPTIONS=ON -DMKTORRENT_PTHREADS=${{ matrix.pthreads }} -DMKTORRENT_OPENSSL=${{ matrix.openssl }} -DMKTORRENT_USE_GITREV_VERSION=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_EXPORT_COMPILE_COMMANDS=ON --graphviz=build/target_graph.dot
        cmake --build build

    - name: Get short commit hash for artifact name
      shell: bash
      run: |
        short_hash=$(echo ${{ github.sha }} | cut -c1-7)
        echo "MKTORRENT_SHORT_HASH=$short_hash" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v2.1.0
      with:
        name: mktorrent-${{ env.MKTORRENT_SHORT_HASH }}_${{ matrix.os }}_openssl-${{ matrix.openssl }}_pthreads-${{ matrix.pthreads }}
        path: |
          build/mktorrent
          build/mktorrent.exe
          build/compile_commands.json
          build/target_graph.dot
